// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

// out[16] = fi(x[16], y[16], ctrl[6]), where x and y are 16 bit inputs, out is 16 bit output and fi is a aritmetic or logical function
// selected from a fixed set of 18 possible functions.
// ctrl consists 6 control bits. We use them to instruct the
// ALU which function to compute. Potentially 2^6 = 64 functions could
// be computed. Each control bit instructs the ALU to carry out
// a certain elementary operation. Taken together - the combined
// effects of these operations cause the CPU to compute a variety
// of useful functions.
// Out  of the possible 64 (6 ctrl bits) we will only implement 18 operations.
// Each function has a specific control code of the 6 bits.

// Or(x,y) = Not( And( Not(x), Not(y) ) );

// 10110110  not->  01001001
// 11010011  not->  00101100 &
//                  --------
//                  00001000 !
//                    --------
// 11110111         11110111

// y+1
// 10110101  zero   00000000   not  11111111
// 00110111  not                    11001000 +
//                                  11000111 not
//                                  00111000

// How to build a circuit that zeros the 16 bit input?

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    // calc x
    Xor16(a=x,b=x,out=zerox);
    Mux16(a=x,b=zerox,sel=zx,out=isXZero);
    Not16(in=isXZero, out=notx);
    Mux16(a=isXZero, b=notx, sel=nx, out=resultX);

    // calc y
    Xor16(a=y,b=y,out=zeroy);
    Mux16(a=y,b=zeroy,sel=zy,out=isYZero);
    Not16(in=isYZero, out=noty);
    Mux16(a=isYZero, b=noty, sel=ny, out=resultY);

    // calc the function
    Add16(a=resultX, b=resultY, out=addxy);
    And16(a=resultX,b=resultY, out=andxy);
    Mux16(a=andxy, b=addxy, sel=f, out=funcXY);

    // calc the f,inal
    Not16(in=funcXY, out=notFunc);
    Mux16(a=funcXY, b=notFunc, sel=no, out=final);
    And16(a=final, b=final, out=out);

    // calculate whether out is zero
    Or16Way(in=final, out=or16way);
    Not(in=or16way, out=zr);

    // calculate whether output is negative
    And16(a=final, b=final, out[15]=ng);


    
}













